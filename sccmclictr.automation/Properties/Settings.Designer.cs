//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sccmclictr.automation.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.5.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"$Reg = [WMIClass]""root\default:StdRegProv""
$DCOM = $Reg.GetBinaryValue(2147483650,""{0}"",""{1}"").uValue
$security = Get-WmiObject -Namespace root/cimv2 -Class __SystemSecurity
$converter = new-object system.management.ManagementClass Win32_SecurityDescriptorHelper
$converter.BinarySDToSDDL($DCOM).SDDL
")]
        public string PSGetDCOMPerm {
            get {
                return ((string)(this["PSGetDCOMPerm"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("$Reg = [WMIClass]\"root\\default:StdRegProv\"\r\n$newDCOMSDDL = \"{2}\"\r\n$DCOMbinarySD =" +
            " $converter.SDDLToBinarySD($newDCOMSDDL)\r\n$Reg.SetBinaryValue(2147483650,\"{0}\",\"" +
            "{1}\", $DCOMbinarySD.binarySD)\r\n")]
        public string PSSetDCOMPerm {
            get {
                return ((string)(this["PSSetDCOMPerm"]));
            }
        }
    }
}
